version: '3.9'

name: ugc-service

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:${ZOOKEEPER_VERSION}
    container_name: ugc-zookeeper
    hostname: ${ZOOKEEPER_HOST}
    volumes:
      - zookeeper_data:/var/lib/zookeeper/
    restart: on-failure
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-server:${KAFKA_VERSION}
    container_name: ugc-kafka
    hostname: ${KAFKA_HOST}
    depends_on:
      - zookeeper
    volumes:
      - kafka_data:/var/lib/kafka/data
    restart: on-failure
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: ${ZOOKEEPER_HOST}:${ZOOKEEPER_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA_HOST}:${KAFKA_PORT}
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  redis:
    image: redis:${REDIS_VERSION}
    container_name: ugc-redis
    hostname: ${REDIS_HOST}
    restart: on-failure
    expose:
      - ${REDIS_PORT}
    volumes:
      - redis_data:/data

  nginx:
    image: nginx:${NGINX_VERSION}
    container_name: ugc-nginx
    hostname: ${NGINX_HOST}
    restart: on-failure
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/site.conf.template:/etc/nginx/templates/site.conf.template:ro
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
    env_file:
      - env/general

  ugc:
    build: ../ugc
    container_name: ugc
    hostname: ${UGC_HOST}
    restart: on-failure
    depends_on:
      - kafka
      - redis
      - mongos1
    expose:
      - ${UGC_PORT}
    entrypoint: /app/docker-entrypoint.sh
    env_file:
      - env/general
      - env/ugc
      - env/kafka
      - env/mongo

  progress-etl:
    build: ../etl-progress
    container_name: ugc-progress-etl
    restart: on-failure
    depends_on:
      - kafka
      - redis
    entrypoint: /app/docker-entrypoint.sh
    env_file:
      - env/general
      - env/progress-etl
      - env/kafka

######################## MONGODB CLUSTER ########################

  mongors1n1:
    image: mongo:${MONGO_VERSION}
    container_name: ugc_mongors1n1
    command: mongod --shardsvr --replSet mongors1 --dbpath /data/db --port 27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - mongo_data1:/data/db

  mongors1n2:
    image: mongo:${MONGO_VERSION}
    container_name: ugc_mongors1n2
    command: mongod --shardsvr --replSet mongors1 --dbpath /data/db --port 27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - mongo_data2:/data/db

  mongors1n3:
    image: mongo:${MONGO_VERSION}
    container_name: ugc_mongors1n3
    command: mongod --shardsvr --replSet mongors1 --dbpath /data/db --port 27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - mongo_data3:/data/db

  mongocfg1:
    image: mongo:${MONGO_VERSION}
    container_name: ugc_mongocfg1
    command: mongod --configsvr --replSet mongors1conf --dbpath /data/db --port 27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - mongo_config1:/data/db

  mongocfg2:
    image: mongo:${MONGO_VERSION}
    container_name: ugc_mongocfg2
    command: mongod --configsvr --replSet mongors1conf --dbpath /data/db --port 27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - mongo_config2:/data/db

  mongos1:
    image: mongo:${MONGO_VERSION}
    container_name: ugc_mongos1
    hostname: ${MONGO_HOST}
    depends_on:
      - mongocfg1
      - mongocfg2
    command: mongos --configdb mongors1conf/mongocfg1:27017,mongocfg2:27017 --port ${MONGO_PORT} --bind_ip_all
    expose:
      - ${MONGO_PORT}
    volumes:
      - /etc/localtime:/etc/localtime:ro

networks:
  default:
    name: ugc-network

volumes:
  zookeeper_data:
  kafka_data:
  redis_data:
  mongo_data1:
  mongo_data2:
  mongo_data3:
  mongo_config1:
  mongo_config2: